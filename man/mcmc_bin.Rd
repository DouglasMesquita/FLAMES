% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc_bin.R
\name{mcmc_bin}
\alias{mcmc_bin}
\title{MCMC for binary regression}
\usage{
mcmc_bin(data, formula, nsim = 1000, burnin = round(0.1 * nsim),
  lag = 10, type = "logit", sample_c = TRUE, sample_d = TRUE,
  sigma_beta = 3, mean_c = FLAMES:::mean_sd_beta(a = 1, b = 2)$mean,
  sd_c = FLAMES:::mean_sd_beta(a = 1, b = 2)$sd,
  mean_d = FLAMES:::mean_sd_beta(a = 2, b = 1)$mean,
  sd_d = FLAMES:::mean_sd_beta(a = 2, b = 1)$sd, a_lambda = 0.01,
  b_lambda = 0.99, var_df = 0.02, var_c = ifelse(sample_d, 0.005,
  0.02), var_d = ifelse(sample_c, 0.005, 0.02), var_lambda = 0.05,
  method = "ARMS", const = 1, const_beta = 2.38^2,
  const_c = 2.38^2, const_d = 2.38^2, const_df = 2.38^2,
  const_lambda = 2.38^2, fitm = FALSE)
}
\arguments{
\item{data}{Dataset to be used}

\item{formula}{Simple formula}

\item{nsim}{Sample size required for MCMC}

\item{burnin}{Burn in for MCMC}

\item{lag}{Lag for MCMC}

\item{type}{"logit", "probit", "cauchit", "robit", "cloglog" or "loglog"}

\item{sample_c}{Should c be sampled?}

\item{sample_d}{Should d be sampled?}

\item{sigma_beta}{Variance of beta prior}

\item{mean_c}{Mean for c a priori}

\item{sd_c}{Standard deviation for c a priori}

\item{mean_d}{Mean for d a priori}

\item{sd_d}{Standard deviation for d a priori}

\item{a_lambda}{Inferior limit for lambda}

\item{b_lambda}{Superior limit for lambda}

\item{var_df}{Variance to sample 1-exp(-df/const)}

\item{var_c}{Variance to sample from c (if sample_d = TRUE) otherwise log(c/(1-c))}

\item{var_d}{Variance to sample d (if sample_c = TRUE) otherwise log(c/(1-c))}

\item{var_lambda}{Variance to sample lambda}

\item{method}{"metropolis" or "ARMS"}

\item{const}{A constant to help on sampling degrees of freedom \eqn{\tilde{df} = df/c}}

\item{const_beta}{A constant to tunning the acceptance rate (default = 2.38^2)}

\item{const_c}{A constant to tunning the acceptance rate (default = 2.38^2)}

\item{const_d}{A constant to tunning the acceptance rate (default = 2.38^2)}

\item{const_df}{A constant to tunning the acceptance rate (default = 2.38^2)}

\item{const_lambda}{A constant to tunning the acceptance rate (default = 2.38^2)}

\item{fitm}{Should return fit measures? "full" for measures based on full dataset or "bootstrap" to use a bootstrap technique}
}
\value{
Chains of all parameters
}
\description{
MCMC for binary regression
}
\examples{
\dontrun{
##-- Seed ----
set.seed(123456)

##-- Data ----
n <- 1000
n_cov <- 2

##-- Covariates
X <- matrix(rt(n*n_cov, df = 2.5), ncol = n_cov)
X <- scale(X, scale = FALSE)

##-- Coefficients
betas <- c(0, -1, 0.5)
XBeta <- cbind(1, X)\%*\%betas

##-- c parameter
c1 <- 0.25
d1 <- 0.95

type_data = "cloglog"

##-- p and y
p <- robit:::inv_link(x = XBeta, type = type_data)*(d1-c1) + c1
y <- rbinom(n = n, size = 1, prob = p)

bd <- data.frame(y = y, X)

##-- Hyperparameters (prioris)
sigma_beta <- 3

mean_c <- robit:::mean_sd_beta(a = 1, b = 2)$mean
sd_c <- robit:::mean_sd_beta(a = 1, b = 2)$sd

mean_d <- robit:::mean_sd_beta(a = 2, b = 1)$mean
sd_d <- robit:::mean_sd_beta(a = 2, b = 1)$sd

a_lambda <- 0.01
b_lambda <- 0.99

##-- MCMC
nsim <- 1000
burnin <- 5000
lag <- 10

f <- y ~ X1 + X2
type <- "cloglog"

##-- ARMS
out_arms <- mcmc_bin(data = bd, formula = f,
                     nsim = nsim, burnin = burnin, lag = lag,
                     type = type, sample_c = TRUE, sample_d = TRUE,
                     sigma_beta = sigma_beta,
                     mean_c = mean_c, sd_c = sd_c, mean_d = mean_d, sd_d = sd_d,
                     a_lambda = a_lambda, b_lambda = b_lambda,
                     method = "ARMS", const = 50, fitm = "full")

##-- ARMS
out_met <- mcmc_bin(data = bd, formula = f,
                    nsim = nsim, burnin = burnin, lag = lag,
                    type = type, sample_c = TRUE, sample_d = TRUE,
                    sigma_beta = sigma_beta,
                    mean_c = mean_c, sd_c = sd_c, mean_d = mean_d, sd_d = sd_d,
                    a_lambda = a_lambda, b_lambda = b_lambda,
                    method = "metropolis", const = 50, fitm = "full")

##-- GLM
out_glm <- glm(formula = f, data = bd, family = "binomial")

summary(out_glm)
summary(out_arms)
summary(out_met)

coef(out_glm)
coef(out_arms)
coef(out_met)
betas

plot(out_arms, ask = T)
plot(out_met, ask = T)
}

}
